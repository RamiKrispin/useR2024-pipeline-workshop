---
title: "Data Refrsh"
format:
  html:
    code-fold: false
---

## Load libraries

```{r}
#| label: load-libraries
#| warning: false
library(modeltime)
library(dplyr)
library(EIAapi)
library(jsonlite)
library(gt)
library(plotly)
library(lubridate)
library(modeltime)
source("../pipeline/eia_data.R")
source("../pipeline/backtesting.R")
```

API Settings:

```{r}
#| label: api settings
meta_json <- read_json(path = "../settings/settings.json")
s <- meta_json$series
series <- lapply(1:length(s), function(i) {
    return(data.frame(
        parent_id = s[[i]]$parent_id,
        parent_name = s[[i]]$parent_name,
        subba_id = s[[i]]$subba_id,
        subba_name = s[[i]]$subba_name
    ))
}) |>
    bind_rows()


facets_template <- list(
    parent = NULL,
    subba = NULL
)

eia_api_key <- Sys.getenv("EIA_API_KEY")

api_path <- meta_json$api_path
meta_path <- meta_json$meta_path
data_path <- meta_json$data_path
forecast_path <- meta_json$forecast_path
forecast_log_path <- meta_json$forecast_log_path
calibrated_models_path <- meta_json$calibrated_models_path

h <- meta_json$backtesting$h
lags <- meta_json$backtesting$features$lags |> unlist()
train_length <- meta_json$train_length
offset <- meta_json$offset
tz <- meta_json$timezone
```

```{r}
#| label: metadata table
#| warning: false
meta_obj <- get_metadata(api_key = eia_api_key, api_path = api_path, meta_path = meta_path, series = series)

gt(meta_obj$request_meta)
```


```{r}
#| label: update the data
#| warning: false
m <- meta_obj$request_meta
index <- meta_obj$last_index + 1

data <- NULL
meta_new <- NULL

for (i in 1:nrow(m)) {
    facets <- facets_template
    facets$parent <- m$parent[i]
    facets$subba <- m$subba[i]
    start <- m$request_start[i]
    end <- m$end[i]
    print(paste(facets$parent, facets$subba, sep = " - "))

    if (m$updates_available[i]) {
        temp <- eia_backfill(
            start = start - lubridate::hours(24),
            end = end + lubridate::hours(24),
            offset = offset,
            api_key = eia_api_key,
            api_path = paste(api_path, "data", sep = ""),
            facets = facets
        ) |> dplyr::filter(time >= start & time <= end)

        index <- seq.POSIXt(from = start, to = end, by = "hour")
        ts_obj <- data.frame(period = index) |>
            left_join(temp, by = c("period" = "time"))
    } else {
        ts_obj <- NULL
        print("No new data is available")
    }

    meta_temp <- create_metadata(data = ts_obj, start = start, end = end, type = "refresh")


    if (is.null(ts_obj)) {
        meta_temp$parent <- m$parent[i]
        meta_temp$subba <- m$subba[i]
    }

    if (meta_temp$success) {
        print("Append the new data")
        d <- append_data(data_path = data_path, new_data = ts_obj, save = TRUE)
        meta_temp$update <- TRUE
    } else {
        meta_temp$update <- FALSE
        meta_temp$comments <- paste(meta_temp$comments, "The data refresh failed, please check the log; ", sep = "")
    }
    meta_temp$index <- NA
    meta_df <- as.data.frame(meta_temp)
    if (!is.null(ts_obj)) {
        data <- bind_rows(data, ts_obj)
    }
    meta_new <- bind_rows(meta_new, meta_df)
}

```

```{r}
#| label: new meta
gt(meta_new)
```

```{r}
#| label: update the metadata
meta_updated <- append_metadata(meta_path = meta_path, new_meta = meta_new, save = TRUE, init = FALSE)
```

### Plot the Series

We will use Plotly to visualize the series:


```{r}
#| label: plot new data
if (!is.null(data)) {
    d <- data |> arrange(subba, period)

    p <- plot_ly(d, x = ~period, y = ~value, color = ~subba, type = "scatter", mode = "lines")

    p
} else {
    print("No new data is available")
}
```


```{r}
#| label: plot the series
data <- readr::read_csv(file = data_path, col_types = readr::cols(
    period = readr::col_datetime(format = ""),
    subba = readr::col_character(),
    subba_name = readr::col_character(),
    parent = readr::col_character(),
    parent_name = readr::col_character(),
    value = readr::col_double(),
    value_units = readr::col_character()
))

head(data)

p <- plot_ly(data, x = ~period, y = ~value, color = ~subba, type = "scatter", mode = "lines")

p
```

## Refresh the forecast

```{r}
#| label: forecast refresh
fc <- NULL
input <- data
index <- "period"
var <- "value"
train_length <- 24 * 31 * 25
lags <- lags
init <- FALSE
save <- TRUE
seasonal <- TRUE
trend <- TRUE


input <- input |>
    dplyr::select(subba, !!rlang::sym(index), y = !!rlang::sym(var))

input_last_point <- input |>
    dplyr::group_by(subba) |>
    dplyr::filter(!!rlang::sym(index) == max(!!rlang::sym(index))) |>
    dplyr::ungroup() |>
    dplyr::select(subba, last_time = !!rlang::sym(index))




log <- load_forecast_log(forecast_log_path = forecast_log_path)

calibrated_models <- readRDS(calibrated_models_path) |>
    dplyr::left_join(
        log |>
            dplyr::filter(success) |>
            dplyr::group_by(subba) |>
            dplyr::filter(end == max(end)) |>
            dplyr::select(subba, method, end),
        by = c("subba", "method")
    ) |>
    dplyr::left_join(input_last_point, by = "subba") |>
    dplyr::mutate(end_filter = lubridate::floor_date(last_time, unit = "day") - lubridate::hours(1)) |>
    dplyr::mutate(refresh = ifelse(end_filter < last_time, TRUE, FALSE))

head(log)

head(calibrated_models)



if (!any(calibrated_models$refresh)) {
    message("No new data is available to refresh the forecast")
} else {
    message("New data is avaiable, starting the forecast refresh process")
    calibrated_models <- calibrated_models |> dplyr::filter(refresh == TRUE)

    for (i in 1:nrow(calibrated_models)) {
        end <- calibrated_models$end_filter[i]
        start <- end - lubridate::hours(train_length)


        temp <- input |>
            dplyr::filter(
                subba == calibrated_models$subba[i],
                !!rlang::sym(index) >= start & !!rlang::sym(index) <= end
            )
        if (i == 1) {
            d <- temp
        } else {
            d <- rbind(d, temp)
        }
    }


    head(d)


    input <- d
    selected_models <- calibrated_models
    h <- h
    index <- index
    var <- "y"
    lags <- lags
    seasonal <- TRUE
    trend <- TRUE

    subba_list <- unique(input$subba)

    fc <- lapply(seq_along(subba_list), function(i) {
        m <- selected_models |> dplyr::filter(subba == subba_list[i])
        method <- m$method[1]

        df <- input |>
            dplyr::filter(subba == subba_list[i])

        print(head(df))

        fc_subba <- create_forecast(
            input = df,
            calibrated_models = m,
            method = method,
            h = h,
            index = index,
            var = var,
            lags = lags,
            seasonal = seasonal,
            trend = trend
        )
        head(fc_subba)
        # |>
        #     dplyr::select(time = .index, subba, method, model = .model_desc, yhat = .value, lower = .conf_lo, upper = .conf_hi)
        # fc_subba$forecast_label <- as.character(as.Date(min(fc_subba$time)))
        return(fc_subba)
    }) |> dplyr::bind_rows()





    # head(forecast)
}
# fc <- refresh_forecast(
#     input = data,
#     forecast_log_path = forecast_log_path,
#     forecast_path = forecast_path,
#     calibrated_models_path = calibrated_models_path,
#     h = h,
#     index = "period",
#     var = "value",
#     train_length = 24 * 31 * 25,
#     lags = lags,
#     init = FALSE,
#     save = TRUE,
#     seasonal = TRUE,
#     trend = TRUE
# )


```


```{r}
#| label: plot the forecast
if (!is.null(fc)) {
    head(fc)
    plot_forecast(
        input = data,
        forecast = fc,
        var = "value",
        index = "period",
        hours = 24 * 3
    )
}

```


## Score the Forecast

```{r}
#| label: score the forecast
fc_log <- load_forecast_log(forecast_log_path = forecast_log_path)

score_rows <- which(!fc_log$score)


if (length(score_rows) == 0) {
    message("All models were scored ")
} else {
    subba <- unique(fc_log$subba[score_rows])

    fc <- load_forecast(forecast_path = forecast_path)

    for (i in subba) {
        print(i)
        d <- data |> dplyr::filter(subba == i)

        r <- which(fc_log$subba == i & !fc_log$score)

        for (l in r) {
            f <- fc |>
                dplyr::filter(forecast_label == fc_log$forecast_label[l], subba == i) |>
                dplyr::left_join(d |> dplyr::select(time = period, subba, value), by = c("time", "subba")) |>
                dplyr::filter(!is.na(value))


            fc_log$mape[l] <- mean(abs(f$value - f$yhat) / f$value)

            fc_log$rmse[l] <- (mean((f$value - f$yhat)^2))^0.5

            fc_log$coverage[l] <- length(which(f$value <= f$upper & f$value >= f$lower)) / nrow(f)

            if (nrow(f) == fc_log$h[l]) {
                fc_log$score[l] <- TRUE
            }

            write.csv(fc_log, forecast_log_path, row.names = FALSE)
        }
    }

    gt::gt(fc_log[score_rows, ])
}


```
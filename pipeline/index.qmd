--- 
title: "California Independent System Operator Hourly Demand"
subtitle: "useR!2024 Workshop"
format: dashboard
--- 

```{r}
library(dplyr)
library(plotly)
library(jsonlite)
source("../pipeline/backtesting.R")
```

```{r}
meta_json <- read_json(path = "../settings/settings.json")
meta_path <- meta_json$meta_path
data_path <- meta_json$data_path
forecast_path <- meta_json$forecast_path
forecast_log_path <- meta_json$forecast_log_path

log <- readr::read_csv(file = meta_path)
last_update <- as.character(max(log$end_act))
data <- readr::read_csv(file = data_path, col_types = readr::cols(
    period = readr::col_datetime(format = ""),
    subba = readr::col_character(),
    subba_name = readr::col_character(),
    parent = readr::col_character(),
    parent_name = readr::col_character(),
    value = readr::col_double(),
    value_units = readr::col_character()
))


forecast_log <- load_forecast_log(forecast_log_path = forecast_log_path)

forecast_log_sub <- forecast_log |>
    dplyr::filter(success) |>
    dplyr::filter(start == max(start))




forecast <- load_forecast(forecast_path = forecast_path)

for (i in 1:nrow(forecast_log_sub)) {
    temp <- forecast |>
        dplyr::filter(subba == forecast_log_sub$subba[i], forecast_label == forecast_log_sub$forecast_label[i])

    if (i == 1) {
        fc <- temp
    } else {
        fc <- rbind(fc, temp)
    }
}




```




## row {.tabset}

```{r}
#| title: Hourly Demand By Provider


p <- plot_forecast(input = data, forecast = fc, hours = 24 * 3, index = "period", var = "value")

p
```

```{r}
#| title: Data Metadata
gt::gt(log)
```



```{r}
#| title: Forecast Metadata
gt::gt(forecast_log)
```